{"version":3,"sources":["images/chatbot-error.png","images/chatbot-summary.png","components/chatbot-container.js","utils/drag-element.js","components/page-header.js","components/chat-button.js","components/page-layout.js","components/list-item.js","routes/home-page.js","routes/details-page.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ChatbotContainer","hideChat","controlChat","useEffect","elmnt","pos1","pos2","pos3","pos4","dragMouseDown","e","console","log","window","event","preventDefault","clientX","clientY","document","onmouseup","closeDragElement","onmousemove","elementDrag","newTop","offsetTop","newLeft","offsetLeft","style","top","left","bottom","right","id","getElementById","onmousedown","dragElement","Box","position","display","backgroundColor","width","height","border","direction","align","justify","as","elevation","pad","Pan","size","alignContent","gap","Hpe","color","Text","FormDown","onClick","flex","overflow","title","src","PageHeader","ChatButton","startChat","Layer","modal","margin","Button","icon","Chat","label","PageLayout","children","useState","setStartChat","Grommet","theme","grommet","ListItem","HomePage","weight","to","Markdown","Image","fill","ChatBotSummary","href","process","ChatBotError","DetailsPage","App","basename","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.70f5051a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/chatbot-error.b445b8ee.png\";","module.exports = __webpack_public_path__ + \"static/media/chatbot-summary.ab3fd7f1.png\";","import React, { useEffect } from 'react';\nimport { Box, Text } from 'grommet';\nimport { Hpe, Pan, FormDown } from 'grommet-icons';\nimport PropTypes from 'prop-types';\n\nimport { dragElement } from '../utils';\n\nconst chatURL =\n  'https://lightning-nimble.cs17.force.com/apex/Prechat_Form?endpoint=https%3A%2F%2F2616.la1-c1cs-ord.salesforceliveagent.com%2Fcontent%2Fs%2Fchat%3Flanguage%3Den_US%26org_id%3D00Dg0000006UNYM%26deployment_id%3D572g00000008Or5%26sid%3D4c0d632e-fc74-4cb1-86d0-20986feb6987%23deployment_id%3D572g00000008Or5%26org_id%3D00Dg0000006UNYM%26button_id%3D573g00000008PXw%26session_id%3D4c0d632e-fc74-4cb1-86d0-20986feb6987';\n\nconst ChatbotContainer = ({ hideChat, controlChat }) => {\n  useEffect(() => {\n    dragElement(document.getElementById('chat-box'));\n    return () => {\n      // @Todo\n      // need to unregister drag event\n    };\n  }, []);\n\n  useEffect(() => {\n    // when hiding the chat window remove top and left\n    // If user drags the chat window to new position and hides\n    // On re-launch go back to default position - [bottom & right - 5px]\n    if (!hideChat) {\n      document.getElementById('chat-box').style.top = null;\n      document.getElementById('chat-box').style.left = null;\n      document.getElementById('chat-box').style.bottom = '5px';\n      document.getElementById('chat-box').style.right = '5px';\n    }\n  }, [hideChat]);\n\n  return (\n    <Box\n      id='chat-box'\n      style={{\n        position: 'absolute',\n        bottom: '5px',\n        right: '5px',\n        display: hideChat ? null : 'none',\n        backgroundColor: 'white',\n      }}\n    >\n      <Box width='300px' height='480px' border>\n        <Box\n          direction='row'\n          align='center'\n          justify='between'\n          as='header'\n          elevation='small'\n          pad='small'\n        >\n          <div id='chat-box-drag'>\n            <Pan size='medium' />\n          </div>\n          <Box direction='row' alignContent='center' gap='small'>\n            <Hpe size='medium' color='#00c781' />\n            <Text>HPE Infosight Bot</Text>\n          </Box>\n          <FormDown\n            size='medium'\n            onClick={() => {\n              controlChat(false);\n            }}\n          />\n        </Box>\n\n        <Box flex overflow='auto' pad='xsmall'>\n          <iframe\n            title='chatFrame'\n            src={chatURL}\n            width='100%'\n            height='100%'\n            style={{ border: 'none' }}\n          />\n        </Box>\n      </Box>\n    </Box>\n  );\n};\n\nChatbotContainer.propTypes = {\n  hideChat: PropTypes.bool.isRequired,\n  controlChat: PropTypes.func.isRequired,\n};\n\nexport default ChatbotContainer;\n","export default function dragElement(elmnt) {\n  var pos1 = 0,\n    pos2 = 0,\n    pos3 = 0,\n    pos4 = 0;\n  console.log('reach drag Element' + elmnt.id);\n  if (document.getElementById(elmnt.id + '-drag')) {\n    // if present, the header is where you move the DIV from:\n    console.log('tie mouse down');\n    document.getElementById(elmnt.id + '-drag').onmousedown = dragMouseDown;\n  } else {\n    console.log('reach else case');\n    // otherwise, move the DIV from anywhere inside the DIV:\n    elmnt.onmousedown = dragMouseDown;\n  }\n\n  function dragMouseDown(e) {\n    console.log('on Mouse down');\n    e = e || window.event;\n    e.preventDefault();\n    // get the mouse cursor position at startup:\n    pos3 = e.clientX;\n    pos4 = e.clientY;\n    document.onmouseup = closeDragElement;\n    // call a function whenever the cursor moves:\n    document.onmousemove = elementDrag;\n  }\n\n  function elementDrag(e) {\n    e = e || window.event;\n    e.preventDefault();\n    // calculate the new cursor position:\n    pos1 = pos3 - e.clientX;\n    pos2 = pos4 - e.clientY;\n    pos3 = e.clientX;\n    pos4 = e.clientY;\n    // set the element's new position:\n    let newTop = elmnt.offsetTop - pos2;\n    let newLeft = elmnt.offsetLeft - pos1;\n    if (newTop > 0) {\n      elmnt.style.top = newTop + 'px';\n    }\n    if (newLeft > 0) {\n      elmnt.style.left = newLeft + 'px';\n    }\n    elmnt.style.bottom = null;\n    elmnt.style.right = null;\n  }\n\n  function closeDragElement() {\n    // stop moving when mouse button is released:\n    document.onmouseup = null;\n    document.onmousemove = null;\n  }\n}\n","import React from 'react';\nimport { Box, Text } from 'grommet';\n\nconst PageHeader = () => {\n  return (\n    <>\n      <Box\n        direction='row'\n        as='header'\n        justify='center'\n        align='center'\n        elevation='small'\n        pad='small'\n      >\n        <Text>ChatBot On Hackdays</Text>\n      </Box>\n    </>\n  );\n};\n\nexport default PageHeader;\n","import React from 'react';\nimport { Layer, Button } from 'grommet';\nimport { Chat } from 'grommet-icons';\n\nconst ChatButton = ({ startChat }) => {\n  return (\n    <Layer position='bottom-right' modal={false} margin='xsmall'>\n      <Button\n        icon={<Chat />}\n        label='Chat Now'\n        onClick={() => startChat(true)}\n      />\n    </Layer>\n  );\n};\n\nexport default ChatButton;\n","import React, { useState } from 'react';\nimport { Grommet, Box } from 'grommet';\n\nimport { grommet } from 'grommet/themes';\n\nimport ChatbotContainer from './chatbot-container';\nimport ChatButton from './chat-button';\n\nimport PageHeader from './page-header';\n\nconst PageLayout = ({ children }) => {\n  const [startChat, setStartChat] = useState(false);\n  return (\n    <Grommet theme={grommet}>\n      <Box width='100%'>\n        <PageHeader />\n        {children}\n        {!startChat && <ChatButton startChat={setStartChat} />}\n        <ChatbotContainer hideChat={startChat} controlChat={setStartChat} />\n      </Box>\n    </Grommet>\n  );\n};\n\nexport default PageLayout;\n","import React from 'react';\nimport { Text } from 'grommet';\n\nconst ListItem = ({ children }) => {\n  return (\n    <li>\n      <Text>{children}</Text>\n    </li>\n  );\n};\n\nexport default ListItem;\n","import React from 'react';\nimport { Text, Markdown, Box, Image } from 'grommet';\nimport { Link } from 'react-router-dom';\nimport ChatBotError from '../images/chatbot-error.png';\nimport ChatBotSummary from '../images/chatbot-summary.png';\n\nimport { ListItem } from '../components';\n\nconst markdownContent = `\n\n## Goal - Prototype chat bot experience\n\n- Have Chat-button on bottom right corner of the App which can launch chat window.\n- Chat button should exist in the same position when user navigates between pages.\n- Chat button should launch chat window which will have capability to connect with salesforce liveagent.\n- Chat Window stays on the app when user switches between pages.\n- Chat window should be draggable and allow user to view what is behind the window.\n\n`;\n\nconst HomePage = () => {\n  return (\n    <>\n      <Text size='xlarge' weight='bold'>\n        Welcome!\n      </Text>\n      <Box margin={{ top: 'small' }}>\n        <Link to='/details'>How do I test this?</Link>\n      </Box>\n\n      <Markdown>{markdownContent}</Markdown>\n\n      <Text size='xlarge' weight='bold' margin={{ top: 'medium' }}>\n        I would like to just see Chat UI:\n      </Text>\n      <ul>\n        <ListItem>Here is how it looks ....</ListItem>\n      </ul>\n      <Box height='medium' width='xlarge'>\n        <Image fill src={ChatBotSummary} />\n      </Box>\n\n      <Box margin={{ top: 'small' }}>\n        <Text size='xlarge' weight='bold'>\n          What if I get Error in the ChatBot?\n        </Text>\n        <ul>\n          <ListItem>\n            We are in prototype phase you may see some errors in chatbot.\n          </ListItem>\n          <ListItem>How do I bring chatbot back to initial state?</ListItem>\n          <ListItem>\n            Click <a href={process.env.PUBLIC_URL}>Refresh</a>\n          </ListItem>\n        </ul>\n        <Box height='medium' width='medium'>\n          <Image fill src={ChatBotError} />\n        </Box>\n      </Box>\n    </>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport { Text } from 'grommet';\nimport { Link } from 'react-router-dom';\nimport { Pan } from 'grommet-icons';\n\nimport { ListItem } from '../components';\n\nconst DetailsPage = () => {\n  return (\n    <>\n      <Text size='xlarge' weight='bold'>\n        Test Steps:\n      </Text>\n      <ul>\n        <ListItem>Click on Chat Now button on bottom right.</ListItem>\n        <ListItem>It will bring up a chat window.</ListItem>\n        <ListItem>Displays an Button to Chat with LiveAgent.</ListItem>\n        <ListItem>\n          Click on It ?? No!! We are not in production yet!! we don't have\n          customer care waiting, to chat with you!!.\n        </ListItem>\n        <ListItem>\n          Then how do I chat ? You need to request salesforce developer to\n          accept your request.\n        </ListItem>\n        <ListItem>\n          How do I request? Ping Abdul (abdul.khader@hpe.com) on skype. Abdul\n          works from San Jose, so you need to ping him in PST timings (not on wk\n          ends, ok !!).\n        </ListItem>\n        <ListItem>\n          Once Abdul says, YES!! Go ahead and click on .. Chat with LiveAgent.\n        </ListItem>\n      </ul>\n      <Text size='xlarge' weight='bold'>\n        I didn't Read your steps, my chatbot shows some error page:\n      </Text>\n      <ul>\n        <ListItem>\n          We are in prototype phase you may see some errors in chatbot.\n        </ListItem>\n        <ListItem>How do I bring chatbot back to initial state?.</ListItem>\n        <ListItem>\n          Just refresh your page!! Click\n          <a href={process.env.PUBLIC_URL}> Here.</a> I will re-initialize your\n          chatbot.\n        </ListItem>\n      </ul>\n      <Link to='/'>Back to Home Page</Link>\n\n      <Text size='xlarge' weight='bold' margin={{ top: 'medium' }}>\n        What else can I test?\n      </Text>\n      <ul>\n        <ListItem>You can test a lot!!.</ListItem>\n        <ListItem>You can test dragging feature of Chat window!!</ListItem>\n        <ListItem>\n          Click on {<Pan size='medium' />}icon and move the chat window around.\n        </ListItem>\n        <ListItem>\n          Keep the chatbot open and switch between HomePage and DetailsPage.\n          Your chat window should be as it is.\n        </ListItem>\n      </ul>\n    </>\n  );\n};\n\nexport default DetailsPage;\n","import React from 'react';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport HomePage from './routes/home-page';\nimport DetailsPage from './routes/details-page';\n\nimport { PageLayout } from './components';\n\nfunction App() {\n  return (\n    <PageLayout>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route exact path='/' children={<HomePage />} />\n        <Route exact path='/details' children={<DetailsPage />} />\n      </Router>\n    </PageLayout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}