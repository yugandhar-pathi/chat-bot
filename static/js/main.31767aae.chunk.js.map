{"version":3,"sources":["routes/home-page.js","routes/details-page.js","components/chatbot-container.js","utils/drag-element.js","components/page-header.js","components/chat-button.js","components/page-layout.js","App.js","serviceWorker.js","index.js"],"names":["HomePage","Text","to","DetailsPage","ChatbotContainer","hideChat","controlChat","useEffect","elmnt","pos1","pos2","pos3","pos4","dragMouseDown","e","window","event","preventDefault","clientX","clientY","document","onmouseup","closeDragElement","onmousemove","elementDrag","style","top","offsetTop","left","offsetLeft","console","log","id","getElementById","onmousedown","dragElement","Box","position","bottom","right","display","width","height","border","direction","align","justify","as","elevation","pad","Pan","size","alignContent","gap","Hpe","color","FormDown","onClick","flex","overflow","title","src","PageHeader","ChatButton","startChat","Layer","modal","margin","Button","icon","Chat","label","PageLayout","children","useState","setStartChat","Grommet","theme","grommet","App","basename","process","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.31767aae.chunk.js","sourcesContent":["import React from 'react';\nimport { Text } from 'grommet';\nimport { Link } from 'react-router-dom';\n\nconst HomePage = () => {\n  return (\n    <>\n      <Text>You are on home page</Text>\n      <Link to='/details'>Details Page</Link>\n    </>\n  );\n};\n\nexport default HomePage;\n","import React from 'react';\nimport { Text } from 'grommet';\nimport { Link } from 'react-router-dom';\n\nconst DetailsPage = () => {\n  return (\n    <>\n      <Text>You are on details page.</Text>\n      <Link to='/'>Home Page</Link>\n    </>\n  );\n};\n\nexport default DetailsPage;\n","import React, { useEffect } from 'react';\n// import { Box, Text, TextInput } from 'grommet';\n// import { Hpe, Pan, FormDown, Return } from 'grommet-icons';\nimport { Box, Text } from 'grommet';\nimport { Hpe, Pan, FormDown } from 'grommet-icons';\nimport PropTypes from 'prop-types';\n\nimport { dragElement } from '../utils';\n\nconst chatURL =\n  'https://lightning-nimble.cs17.force.com/apex/Prechat_Form?endpoint=https%3A%2F%2F2616.la1-c1cs-ord.salesforceliveagent.com%2Fcontent%2Fs%2Fchat%3Flanguage%3Den_US%26org_id%3D00Dg0000006UNYM%26deployment_id%3D572g00000008Or5%26sid%3D4c0d632e-fc74-4cb1-86d0-20986feb6987%23deployment_id%3D572g00000008Or5%26org_id%3D00Dg0000006UNYM%26button_id%3D573g00000008PXw%26session_id%3D4c0d632e-fc74-4cb1-86d0-20986feb6987';\n\nconst ChatbotContainer = ({ hideChat, controlChat }) => {\n  useEffect(() => {\n    dragElement(document.getElementById('chat-box'));\n    return () => {\n      // @Todo\n      // need to unregister drag event\n    };\n  }, []);\n\n  return (\n    <Box\n      id='chat-box'\n      style={{\n        position: 'absolute',\n        bottom: '5px',\n        right: '5px',\n        display: hideChat ? 'block' : 'none',\n      }}\n    >\n      <Box width='300px' height='480px' border>\n        <Box\n          direction='row'\n          align='center'\n          justify='between'\n          as='header'\n          elevation='small'\n          pad='small'\n        >\n          <div id='chat-box-drag'>\n            <Pan size='medium' />\n          </div>\n          <Box direction='row' alignContent='center' gap='small'>\n            <Hpe size='medium' color='#00c781' />\n            <Text>HPE Infosight Bot</Text>\n          </Box>\n          <FormDown\n            size='medium'\n            onClick={() => {\n              controlChat(false);\n            }}\n          />\n        </Box>\n\n        <Box flex overflow='auto' pad='xsmall'>\n          {/* <Text> Chat window</Text> */}\n          <iframe title='chatFrame' src={chatURL} width='100%' height='100%' />\n        </Box>\n        {/* <Box\n          as='footer'\n          border={{ side: 'top' }}\n          pad='small'\n          justify='between'\n          direction='row'\n          align='center'\n        >\n          <TextInput placeholder='Send a message' />\n          <Return size='medium' />\n        </Box> */}\n      </Box>\n    </Box>\n  );\n};\n\nChatbotContainer.propTypes = {\n  hideChat: PropTypes.func.isRequired,\n};\n\nexport default ChatbotContainer;\n","export default function dragElement(elmnt) {\n  var pos1 = 0,\n    pos2 = 0,\n    pos3 = 0,\n    pos4 = 0;\n  console.log('reach drag Element' + elmnt.id);\n  if (document.getElementById(elmnt.id + '-drag')) {\n    // if present, the header is where you move the DIV from:\n    console.log('tie mouse down');\n    document.getElementById(elmnt.id + '-drag').onmousedown = dragMouseDown;\n  } else {\n    console.log('reach else case');\n    // otherwise, move the DIV from anywhere inside the DIV:\n    elmnt.onmousedown = dragMouseDown;\n  }\n\n  function dragMouseDown(e) {\n    e = e || window.event;\n    e.preventDefault();\n    // get the mouse cursor position at startup:\n    pos3 = e.clientX;\n    pos4 = e.clientY;\n    document.onmouseup = closeDragElement;\n    // call a function whenever the cursor moves:\n    document.onmousemove = elementDrag;\n  }\n\n  function elementDrag(e) {\n    e = e || window.event;\n    e.preventDefault();\n    // calculate the new cursor position:\n    pos1 = pos3 - e.clientX;\n    pos2 = pos4 - e.clientY;\n    pos3 = e.clientX;\n    pos4 = e.clientY;\n    // set the element's new position:\n    elmnt.style.top = elmnt.offsetTop - pos2 + 'px';\n    elmnt.style.left = elmnt.offsetLeft - pos1 + 'px';\n  }\n\n  function closeDragElement() {\n    // stop moving when mouse button is released:\n    document.onmouseup = null;\n    document.onmousemove = null;\n  }\n}\n","import React from 'react';\nimport { Box, Text } from 'grommet';\n\nconst PageHeader = () => {\n  return (\n    <>\n      <Box\n        direction='row'\n        as='header'\n        justify='center'\n        align='center'\n        elevation='small'\n        pad='small'\n      >\n        <Text>ChatBot On Hackdays</Text>\n      </Box>\n    </>\n  );\n};\n\nexport default PageHeader;\n","import React from 'react';\nimport { Layer, Button } from 'grommet';\nimport { Chat } from 'grommet-icons';\n\nconst ChatButton = ({ startChat }) => {\n  return (\n    <Layer position='bottom-right' modal={false} margin='xsmall'>\n      <Button\n        icon={<Chat />}\n        label='Chat Now'\n        onClick={() => startChat(true)}\n      />\n    </Layer>\n  );\n};\n\nexport default ChatButton;\n","import React, { useState } from 'react';\nimport { Grommet, Box } from 'grommet';\n\nimport { grommet } from 'grommet/themes';\n\nimport ChatbotContainer from './chatbot-container';\nimport ChatButton from './chat-button';\n\nimport PageHeader from './page-header';\n\nconst PageLayout = ({ children }) => {\n  const [startChat, setStartChat] = useState(false);\n  return (\n    <Grommet theme={grommet}>\n      <Box width='100%'>\n        <PageHeader />\n        {children}\n        {!startChat && <ChatButton startChat={setStartChat} />}\n        <ChatbotContainer hideChat={startChat} controlChat={setStartChat} />\n      </Box>\n    </Grommet>\n  );\n};\n\nexport default PageLayout;\n","import React from 'react';\n\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\n\nimport HomePage from './routes/home-page';\nimport DetailsPage from './routes/details-page';\n\nimport { PageLayout } from './components';\n\nfunction App() {\n  return (\n    <PageLayout>\n      <Router basename={process.env.PUBLIC_URL}>\n        <Route exact path='/' children={<HomePage />} />\n        <Route exact path='/details' children={<DetailsPage />} />\n      </Router>\n    </PageLayout>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}